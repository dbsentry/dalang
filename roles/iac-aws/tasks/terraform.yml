#############################################################################
#                       Confidentiality Information                         #
#                                                                           #
# This module is the confidential and proprietary information of            #
# DBSentry Corp.; it is not to be copied, reproduced, or transmitted in any #
# form, by any means, in whole or in part, nor is it to be used for any     #
# purpose other than that for which it is expressly provided without the    #
# written permission of DBSentry Corp.                                      #
#                                                                           #
# Copyright (c) 2020-2021 DBSentry Corp.  All Rights Reserved.              #
#                                                                           #
#############################################################################
- name: Check if folder exists
  stat:
    path: "{{ tf_directory }}/{{ tf_stack }}"
  register: tf_folder_data

- name: Report a missing folder
  debug:
    msg: "Ignoring missing folder {{ tf_stack }}"
  when: not tf_folder_data.stat.exists

- block:
    - name: AWS. Target State - {{ tf_target_state }}
      terraform:
        project_path: "{{ tf_directory }}/{{ tf_stack }}"
        state: "{{ tf_target_state }}"
        force_init: true
        lock: yes
        backend_config:
          region: "{{ aws_default_region }}"
          bucket: "{{ tf_bucket }}"
          key: "{{ tf_stack }}.tfstate"
          dynamodb_table: "{{ tf_dynamodb_table }}"
          role_arn: "arn:aws:iam::{{ group_vars.account_id }}:role/{{ all_vars.tfrole }}"
          encrypt: "true"
        variables:
          all_vars: "{{ all_vars | to_json }}"
          group_vars: "{{ group_vars | to_json }}"
      environment: 
        AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
        AWS_DEFAULT_REGION: "{{ aws_default_region }}"
      register: output
      when: tf_target_state in ["present","absent"]

    - name: AWS. Target State - {{ tf_target_state }}
      terraform:
        project_path: "{{ tf_directory }}/{{ tf_stack }}"
        state: "{{ tf_target_state }}"
        force_init: true
        lock: yes
        plan_file: "{{ tf_directory }}/{{ tf_stack }}/{{ tf_stack }}.tfplan"
        backend_config:
          region: "{{ aws_default_region }}"
          bucket: "{{ tf_bucket }}"
          key: "{{ tf_stack }}.tfstate"
          dynamodb_table: "{{ tf_dynamodb_table }}"
          role_arn: "arn:aws:iam::{{ group_vars.account_id }}:role/{{ all_vars.tfrole }}"
          encrypt: "true"
        variables:
          all_vars: "{{ all_vars | to_json }}"
          group_vars: "{{ group_vars | to_json }}"
      environment: 
        AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
        AWS_DEFAULT_REGION: "{{ aws_default_region }}"
      register: output
      when: tf_target_state in ["planned"]

    - debug:
        msg: "{{ output }}"
  when: tf_folder_data.stat.exists